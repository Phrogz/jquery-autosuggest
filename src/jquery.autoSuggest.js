// Generated by CoffeeScript 1.3.3

/*
This is a rewritten version of Drew Wilsons "AutoSuggest" plugin from 2009/2010.
www.drewwilson.com / code.drewwilson.com/entry/autosuggest-jquery-plugin

Originally forked by Wu Yuntao (on GitHub)
http://github.com/wuyuntao/jquery-autosuggest
Based on the 1.6er release dated in July, 2012
*/


/*
Initial setup: Override any existing $
*/


(function() {
  var $, SelectionControl,
    __hasProp = {}.hasOwnProperty;

  $ = jQuery;

  /*
  Special helper classes
  */


  /*
  The SelectionControl maintains and manage any selections.
  */


  SelectionControl = (function() {

    SelectionControl.prototype.hiddenField = null;

    SelectionControl.prototype.items = null;

    function SelectionControl(hiddenField, items) {
      this.hiddenField = hiddenField;
      this.items = items != null ? items : [];
    }

    SelectionControl.prototype.syncToHiddenField = function() {
      var item, value, _i, _len, _ref;
      value = '';
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        value += ',' + item;
      }
      if (value) {
        value += ',';
      }
      this.hiddenField.val(value || ',');
    };

    SelectionControl.prototype.add = function(item) {
      if (!this.exist(item)) {
        this.items.push(item);
      }
      this.syncToHiddenField();
    };

    SelectionControl.prototype.remove = function(item) {
      this.items = $.grep(this.items, function(value) {
        return value !== item;
      });
      this.syncToHiddenField();
    };

    SelectionControl.prototype.isEmpty = function() {
      return this.items.length === 0;
    };

    SelectionControl.prototype.exist = function(item) {
      return $.inArray(item, this.items) !== -1;
    };

    SelectionControl.prototype.getAll = function() {
      return this.items.slice(0);
    };

    SelectionControl.prototype.clear = function() {
      this.items = [];
      this.syncToHiddenField();
    };

    return SelectionControl;

  })();

  $.fn.autoSuggest = function(data, options) {
    /**
     * default settings
    */

    var countObjectProperties, defaults, escapeHtml, escapeQuotes, fetcher, getExtraParams, request;
    defaults = {
      asHtmlID: false,
      startText: 'Enter Name Here',
      usePlaceholder: false,
      emptyText: 'No Results Found',
      preFill: {},
      limitText: 'No More Selections Are Allowed',
      /**
       * name of object property
       * @type string
      */

      selectedItemProp: 'value',
      /**
       * name of object property
       * @type string
      */

      selectedValuesProp: 'value',
      /**
       * comma separated list of object property names
      */

      searchObjProps: 'value',
      queryParam: 'q',
      limitParam: 'limit',
      /**
       * number for 'limit' param on ajax request
       * @type number
      */

      retrieveLimit: null,
      extraParams: null,
      matchCase: false,
      minChars: 1,
      keyDelay: 400,
      resultsHighlight: true,
      neverSubmit: false,
      selectionLimit: false,
      showResultList: true,
      showResultListWhenNoMatch: false,
      canGenerateNewSelections: true,
      start: function() {},
      selectionClick: function(elem) {},
      selectionAdded: function(elem) {},
      selectionRemoved: function(elem) {
        return elem.remove();
      },
      /**
       * callback function formatting a list
       * @type Function
      */

      formatList: null,
      /**
       * interceptor
      */

      beforeRetrieve: function(string) {
        return string;
      },
      /**
       * interceptor
      */

      retrieveComplete: function(data) {
        return data;
      },
      resultClick: function(data) {},
      resultsComplete: function() {},
      preventPropagationOnEscape: false,
      ajaxOptions: {
        type: 'get',
        dataType: 'json'
      }
    };
    options = $.extend({}, defaults, options);
    /* TODO
    */

    countObjectProperties = function(object) {
      var x;
      return ((function() {
        var _results;
        _results = [];
        for (x in object) {
          if (!__hasProp.call(object, x)) continue;
          _results.push(x);
        }
        return _results;
      })()).length;
    };
    /*
      TODO: Utility
    */

    getExtraParams = function() {
      var obj, pair, parts, result, _i, _len, _ref;
      result = options.extraParams;
      if ($.isFunction(result)) {
        result = result(this);
      }
      /**
       * AutoSuggest <= 1.7 supported only a string of params. Since 2, the extra params will be used as a standard
       * $.fn.Ajax "data" parameter. The next lines will ensure that the result is such an object.
      */

      if ($.type(result) === 'string') {
        obj = {};
        _ref = result.split('&');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pair = _ref[_i];
          if (!(pair !== '')) {
            continue;
          }
          parts = pair.split('=', 2);
          if (parts.length) {
            obj[parts[0]] = parts[1];
          }
        }
        result = obj;
      }
      return result;
    };
    /*
      TODO: Utility
      Internal helper escaping HTML correctly.
    */

    escapeHtml = function(text) {
      return $('<span/>').text(text).html();
    };
    /*
      TODO: Utility
      Internal helper escaping quotes correctly when used in inline HTML attributes).
    */

    escapeQuotes = function(text) {
      if (text) {
        return text.replace(/"/g, '\\"');
      }
    };
    request = null;
    fetcher = (function() {
      switch ($.type(data)) {
        case 'function':
          return data;
        case 'string':
          return function(query, next) {
            var ajaxCfg, extraParams, params;
            params = {};
            /* ensures query is encoded
            */

            params["" + options.queryParam] = encodeURIComponent(decodeURIComponent(query));
            if (options.retrieveLimit) {
              params[options.limitParam] = encodeURIComponent(options.retrieveLimit);
            }
            extraParams = getExtraParams();
            if ($.type(extraParams) === 'object') {
              $.extend(params, extraParams);
            }
            ajaxCfg = $.extend({}, options.ajaxOptions, {
              url: data,
              data: params
            });
            return request = $.ajax(ajaxCfg).done(function(data) {
              return next(options.retrieveComplete.call(this, data), query);
            });
          };
        case 'array':
        case 'object':
          return function(query, next) {
            return next(data, query);
          };
      }
    })();
    if (!fetcher) {
      return;
    }
    return this.each(function(x) {
      var Selections, abortRequest, add_selected_item, i, input, input_focus, interval, item, keyChange, lastKeyPressCode, moveSelection, new_value, num_count, org_li, prefill_value, prev, processData, processRequest, results_holder, results_ul, selections_holder, tab_press, timeout, totalSelections, value, values_input, x_id, _i, _j, _len, _len1, _ref, _ref1;
      if (!options.asHtmlID) {
        x = "" + x + (Math.floor(Math.random() * 100));
        x_id = "as-input-" + x;
      } else {
        x = options.asHtmlID;
        x_id = x;
      }
      input = $(this);
      input.attr({
        autocomplete: 'off',
        id: x_id
      });
      input.addClass('as-input');
      if (options.usePlaceholder) {
        input.attr({
          placeholder: options.startText
        });
      } else {
        input.val(options.startText);
      }
      add_selected_item = function(data, num) {
        var close, item;
        Selections.add(data[options.selectedValuesProp]);
        item = $("<li class=\"as-selection-item\" id=\"as-selection-" + num + "\" data-value=\"" + (escapeQuotes(escapeHtml(data[options.selectedValuesProp]))) + "\"></li>");
        item.click(function() {
          var element;
          element = $(this);
          options.selectionClick.call(this, element);
          selections_holder.children().removeClass('selected');
          element.addClass('selected');
        });
        item.mousedown(function() {
          var input_focus;
          input_focus = false;
        });
        close = $("<a class=\"as-close\">&times;</a>");
        close.click(function() {
          var input_focus;
          Selections.remove(data[options.selectedValuesProp]);
          options.selectionRemoved.call(this, item);
          input_focus = true;
          input.focus();
          return false;
        });
        if (typeof data[options.selectedItemProp] !== 'string') {
          org_li.before(item.append(data[options.selectedItemProp]).prepend(close));
        } else {
          org_li.before(item.text(data[options.selectedItemProp]).prepend(close));
        }
        options.selectionAdded.call(this, org_li.prev(), data[options.selectedValuesProp]);
        return org_li.prev();
      };
      input_focus = false;
      input.wrap("<ul class=\"as-selections\" id=\"as-selections-" + x + "\"></ul>").wrap("<li class=\"as-original\" id=\"as-original-" + x + "\"></li>");
      selections_holder = $("#as-selections-" + x);
      org_li = $("#as-original-" + x);
      results_holder = $("<div class=\"as-results\" id=\"as-results-" + x + "\"></div>");
      results_ul = $("<ul class=\"as-list\"></ul>");
      values_input = $("<input type=\"hidden\" class=\"as-values\" name=\"as_values_" + x + "\" id=\"as-values-" + x + "\" />");
      /*
            DO START
      */

      options.start.call(this, {
        add: function(data) {
          var counted, item;
          counted = $(selections_holder).find('li').length;
          item = add_selected_item(data, "u" + counted);
          return item != null ? item.addClass('blur') : void 0;
        },
        remove: function(value) {
          Selections.remove(value);
          return selections_holder.find("li[data-value=\"" + (escapeHtml(value)) + "\"]").remove();
        }
      });
      Selections = new SelectionControl(values_input);
      prefill_value = '';
      switch ($.type(options.preFill)) {
        case 'string':
          _ref = options.preFill.split(',');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            value = _ref[_i];
            item = {};
            item["" + options.selectedValuesProp] = value;
            if (value !== '') {
              add_selected_item(item, "000" + i);
            }
          }
          prefill_value = options.preFill;
          break;
        case 'array':
          prefill_value = '';
          if (options.preFill.length) {
            _ref1 = options.preFill;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              item = _ref1[i];
              new_value = item[options.selectedValuesProp];
              if (typeof new_value === 'undefined') {
                new_value = '';
              }
              prefill_value += new_value + ',';
              if (new_value !== '') {
                add_selected_item(item, "000" + i);
              }
            }
          }
      }
      if (prefill_value !== '') {
        input.val('');
        selections_holder.find('li.as-selection-item').addClass('blur').removeClass('selected');
      }
      input.after(values_input);
      selections_holder.click(function() {
        input_focus = true;
        input.focus();
      });
      selections_holder.mousedown(function() {
        input_focus = false;
      });
      selections_holder.after(results_holder);
      interval = null;
      timeout = null;
      prev = '';
      totalSelections = 0;
      tab_press = false;
      lastKeyPressCode = null;
      num_count = 0;
      keyChange = function() {
        /*
              Since most IME does not trigger any key events, if we press [del]
              and type some chinese character, `lastKeyPressCode` will still be [del].
              This might cause problem so we move the line to key events section;
              ignore if the following keys are pressed: [del] [shift] [capslock]
        */

        var string;
        string = input.val().replace(/[\\]+|[\/]+/g, '');
        if (string === prev) {
          return;
        }
        prev = string;
        if (string.length >= options.minChars) {
          selections_holder.addClass('loading');
          return processRequest(string);
        } else {
          selections_holder.removeClass('loading');
          return results_holder.hide();
        }
      };
      processRequest = function(string) {
        if ($.isFunction(options.beforeRetrieve)) {
          string = options.beforeRetrieve.call(this, string);
          abortRequest();
          return fetcher(string, processData);
        }
      };
      processData = function(data, query) {
        var formatted, forward, matchCound, name, num, regx, str, this_data, _k, _l, _len2, _len3, _ref2;
        if (!options.matchCase) {
          query = query.toLowerCase();
        }
        query = query.replace('(', '\(', 'g').replace(')', '\)', 'g');
        matchCound = 0;
        results_holder.hide().html(results_ul.html(''));
        num = 0;
        for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
          item = data[_k];
          num_count++;
          forward = false;
          if (options.searchObjProps === 'value') {
            str = item.value;
          } else {
            str = '';
            _ref2 = options.searchObjProps.split(',');
            for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
              name = _ref2[_l];
              str += "" + item[$.trim(name)] + " ";
            }
          }
          if (str) {
            if (!options.matchCase) {
              str = str.toLowerCase();
            }
            if (str.search(query) !== -1 && !Selections.exist(item[options.selectedValuesProp])) {
              forward = true;
            }
          }
          if (forward) {
            formatted = $("<li class=\"as-result-item\" id=\"as-result-item-" + num + "\"></li>");
            formatted.click(function() {
              var element, number, raw_data;
              element = $(this);
              raw_data = element.data('data');
              number = raw_data.num;
              if (selections_holder.find("#as-selection-" + number).length <= 0 && !tab_press) {
                data = raw_data.attributes;
                input.val('').focus();
                prev = '';
                add_selected_item(data, number);
                options.resultClick.call(this, raw_data);
                results_holder.hide();
              }
              tab_press = false;
            });
            formatted.mousedown(function() {
              input_focus = false;
            });
            formatted.mouseover(function() {
              var element;
              element = $(this);
              results_ul.find('li').removeClass('active');
              element.addClass('active');
            });
            formatted.data('data', {
              attributes: data[num],
              num: num_count
            });
            this_data = $.extend({}, data[num]);
            query = query.replace(/"/g, '\\"');
            if (!options.matchCase) {
              regx = new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + escapeHtml(query) + ")(?![^<>]*>)(?![^&;]+;)", "gi");
            } else {
              regx = new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + escapeHtml(query) + ")(?![^<>]*>)(?![^&;]+;)", "g");
            }
            /* When this is a string, escape the value and process a regular replacement for highlighting.
            */

            if (typeof this_data[options.selectedItemProp] === 'string') {
              this_data[options.selectedItemProp] = escapeHtml(this_data[options.selectedItemProp]);
              if (options.resultsHighlight && query.length > 0) {
                this_data[options.selectedItemProp] = this_data[options.selectedItemProp].replace(regx, '<em>$1</em>');
              }
            } else {
              this_data[options.selectedItemProp].html(this_data[options.selectedItemProp].html().replace(regx, '<em>$1</em>'));
            }
            if (!options.formatList) {
              formatted = formatted.html(this_data[options.selectedItemProp]);
            } else {
              formatted = options.formatList.call(this, this_data, formatted);
            }
            results_ul.append(formatted);
            this_data = null;
            matchCound++;
            if (options.retrieveLimit && options.retrieveLimit === matchCound) {
              break;
            }
          }
          num += 1;
        }
        selections_holder.removeClass('loading');
        if (matchCound <= 0) {
          results_ul.html("<li class=\"as-message\">" + options.emptyText + "</li>");
        }
        results_ul.css({
          width: selections_holder.outerWidth()
        });
        if (matchCound > 0 || !options.showResultListWhenNoMatch) {
          results_holder.show();
        }
        return options.resultsComplete.call(this);
      };
      moveSelection = function(direction) {
        var active, lis, start;
        if (results_holder.find(':visible').length) {
          lis = results_holder.find('li');
          switch (direction) {
            case 'down':
              start = lis.eq(0);
              break;
            default:
              start = lis.filter(':last');
          }
          active = results_holder.find('li.active:first');
          if (active.length) {
            switch (direction) {
              case 'down':
                start = active.next();
                break;
              default:
                start = active.prev();
            }
          }
          lis.removeClass('active');
          return start.addClass('active');
        }
      };
      abortRequest = function() {
        if (!request) {
          return;
        }
        request.abort();
        return request = null;
      };
      input.focus(function() {
        var element;
        element = $(this);
        if (!options.usePlaceholder && element.val() === options.startText && Selections.isEmpty()) {
          element.val('');
        } else if (input_focus) {
          selections_holder.find('li.as-selections-item').removeClass('blur');
          if (element.val() !== '') {
            results_ul.css({
              width: selections_holder.outerWidth()
            });
            results_holder.show();
          }
        }
        if (interval) {
          clearInterval(interval);
        }
        interval = setInterval((function() {
          if (options.showResultList) {
            if (options.selectionLimit && selections_holder.find('li.as-selection-item').length >= options.selectionLimit) {
              results_ul.html("<li class=\"as-message\">" + options.limitText + "</li>");
              results_holder.show();
            } else {
              keyChange();
            }
          }
        }), options.keyDelay);
        input_focus = true;
        if (options.minChars === 0) {
          processRequest(element.val());
        }
        return true;
      });
      input.blur(function() {
        var element;
        element = $(this);
        if (!options.usePlaceholder && element.val() === '' && Selections.isEmpty() && prefill_value === '' && options.minChars > 0) {
          element.val(options.startText);
        } else if (input_focus) {
          selections_holder.find('li.as-selection-item').addClass('blur').removeClass('selected');
          results_holder.hide();
        }
        if (interval) {
          clearInterval(interval);
        }
      });
      return input.keydown(function(event) {
        /* track the last key pressed
        */

        var active, first_focus, i_input, last, n_data;
        lastKeyPressCode = event.keyCode;
        first_focus = false;
        switch (event.keyCode) {
          case 38:
            event.preventDefault();
            moveSelection('up');
            break;
          case 40:
            event.preventDefault();
            moveSelection('down');
            break;
          case 8:
            if (input.val() === '') {
              last = Selections.getAll();
              if (last.length) {
                last = last[last.length - 1];
              } else {
                last = null;
              }
              selections_holder.children().not(org_li.prev()).removeClass('selected');
              if (org_li.prev().hasClass('selected')) {
                Selections.remove(last);
                options.selectionRemoved.call(this, org_li.prev());
              } else {
                options.selectionClick.call(this, org_li.prev());
                org_li.prev().addClass('selected');
              }
            }
            if (input.val().length === 1) {
              results_holder.hide();
              prev = '';
              abortRequest();
            }
            if (results_holder.find(':visible').length) {
              if (timeout) {
                clearTimeout(timeout);
              }
              timeout = setTimeout((function() {
                keyChange();
              }), options.keyDelay);
            }
            break;
          case 9:
          case 188:
            if (options.canGenerateNewSelections) {
              tab_press = true;
              i_input = input.val().replace(/(,)/g, '');
              active = results_holder.find('li.active:first');
              /* Generate a new bubble with text when no suggestion selected
              */

              if (i_input !== '' && !Selections.exist(i_input) && i_input.length >= options.minChars && active.length === 0) {
                event.preventDefault();
                n_data = {};
                n_data["" + options.selectedItemProp] = i_input;
                n_data["" + options.selectedValuesProp] = i_input;
                add_selected_item(n_data, "00" + (selections_holder.find('li').length + 1));
                input.val('');
                /* Cancel previous request when new tag is added
                */

                abortRequest();
              }
            }
            break;
          case 13:
            tab_press = false;
            active = results_holder.find('li.active:first');
            if (active.length) {
              active.click();
              results_holder.hide();
            }
            if (options.neverSubmit || active.length) {
              event.preventDefault();
            }
            break;
          case 27:
            if (options.preventPropagationOnEscape && results_holder.find(':visible').length) {
              event.stopPropagation();
            }
            break;
          case 16:
          case 20:
            abortRequest();
            results_holder.hide();
        }
      });
    });
  };

}).call(this);
